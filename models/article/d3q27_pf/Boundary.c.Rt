<?R
#########################################################
# create pressure/velocity boundaries in all directions #
#########################################################
    my_velocity_boundaries = PV(paste0(c("N","E","S","W","F","B"),"Velocity"))
    my_pressure_boundaries = PV(paste0(c("N","E","S","W","F","B"),"Pressure"))
    my_normal_directions = rbind(c(0,1,0),
                                 c(1,0,0),
                                 c(0,-1,0),
                                 c(-1,0,0),
                                 c(0,0,1),
                                 c(0,0,-1))

    cube_faces = 6
    b_uavg = PV("Uavg")
    b_height = PV("HEIGHT")
    b_pipecentre_y = PV("pipeCentre_Y")
    b_pipecentre_z = PV("pipeCentre_Z")
    b_coords = c(PV("X"),PV("Y"),PV("Z"))
    b_velocities = c(PV("U"),PV("V"),PV("W"))

    coords_shift   = b_coords[c(2:length(b_coords),1)]
    coords_shift_2 = coords_shift[c(2:length(coords_shift),1)]
    
    b_channel_flow = 6*b_uavg*coords_shift*(b_height - coords_shift)*b_height^-2

    b_pipe_flow_tmp = (coords_shift-b_pipecentre_y)^2+(coords_shift_2-b_pipecentre_z)^2

    for (ii in 1:cube_faces){
?>
CudaDeviceFunction void <?R C(my_velocity_boundaries[ii])?>(){
    U = VelocityX;
    V = VelocityY;
    W = VelocityZ;
    if ( developedFlow > 0.1 ){
        <?R
            C(b_velocities,-1*my_normal_directions[ii,]*b_channel_flow)
        ?>
    }
    if ( developedPipeFlow > 0.1 ){
        U = <?R C(-1*my_normal_directions[ii,1])?> * (2.0*Uavg*(1-pow(sqrt(<?R C(b_pipe_flow_tmp[1])?>)/pipeRadius,2) )) ;
        V = <?R C(-1*my_normal_directions[ii,2])?> * (2.0*Uavg*(1-pow(sqrt(<?R C(b_pipe_flow_tmp[2])?>)/pipeRadius,2) )) ;
        W = <?R C(-1*my_normal_directions[ii,3])?> * (2.0*Uavg*(1-pow(sqrt(<?R C(b_pipe_flow_tmp[3])?>)/pipeRadius,2) )) ;
    }
	<?R
		n = my_normal_directions[ii,]
		geq = EQ$feq
		bounce = Bounce(U)
		sel = as.vector( (U %*% n) < 0)

		sel2 = as.vector( ( U %*% n) == 0)	
		exM = (g[sel2] - geq[sel2]) %*% U[sel2,]
        Unknowns = 1.0/max(colSums(U[sel2,]^2)) # should be 6 for q27, 4 for q15
        Nmat = t(U[sel,]) %*% U[sel,]

		C(g[sel], g[bounce][sel] + (geq[sel] - geq[bounce][sel]) - 0.5* (exM %*% solve(Nmat) %*% t(U))[sel])
	?>
	<?R
		U_PF = U[1:PF_velocities,]
        	pf = PV("PhaseField")
		n = my_normal_directions[ii,]
		heq = pf * EQ_h$feq
		bounce = Bounce(U_PF)
		sel = as.vector( (U_PF %*% n) < 0)

		sel2 = as.vector( ( U_PF %*% n) == 0)	
		exM = (h[sel2] - heq[sel2]) %*% rep(1,sum(sel2)) 
		Unknowns = 1.0/sum(sel)

		C(h[sel], heq[sel] + heq[bounce][sel] - h[bounce][sel] - 0.5 * Unknowns * (exM))
	?>
}

CudaDeviceFunction void <?R C(my_pressure_boundaries[ii])?>(){
    real_t d = getRho();
	real_t pstar = Pressure / (d*cs2);
	<?R
        EQ = MRT_eq(U,PV(1),u,mat=t(M))
       	pstar = PV("pstar")
		n = my_normal_directions[ii,]
		geq = pstar*w_g + (EQ$feq - w_g)
		bounce = Bounce(U)
		sel = as.vector( (U %*% n) < 0)

		sel2 = as.vector( ( U %*% n) == 0)	
		exM = (g[sel2] - geq[sel2]) %*% rep(1,sum(sel2)) 
		Unknowns = 1.0/sum(sel)

		C(g[sel], geq[sel] + geq[bounce][sel] - g[bounce][sel] - 0.5 * Unknowns * (exM))
	?>
	<?R
		U_PF = U[1:PF_velocities,]
       	pf = PV("PhaseField")
		n = my_normal_directions[ii,]
		heq = pf * EQ_h$feq
		bounce = Bounce(U_PF)
		sel = as.vector( (U_PF %*% n) < 0)

		sel2 = as.vector( ( U_PF %*% n) == 0)	
		exM = (h[sel2] - heq[sel2]) %*% rep(1,sum(sel2)) 
		Unknowns = 1.0/sum(sel)

		C(h[sel], heq[sel] + heq[bounce][sel] - h[bounce][sel] - 0.5 * Unknowns * (exM))
	?>
}

<?R
}
?>

#ifdef OPTIONS_OutFlow
<?R
	if (Options$OutFlow) {
		####################################################
		# Outflow conditions are tested but not rigorously #
		#            treat these with care!                #
		# NOTE: outside of east/west the user needs to add #
		#       suitable conditions for calcGradPhi and    #
		#       calculating laplace parameters.            #
		# If for some reason you need additional direction #
		#  use the existing as a template to create them.  #
		####################################################
		g_neighbours = Density$nicename[Density$group =="g"]
		h_neighbours = Density$nicename[Density$group =="h"]

		g_n_e = PV(paste(g_neighbours,"(",-Density$dx[Density$group=="g"]-1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")",sep=""))
		h_n_e = PV(paste(h_neighbours,"(",-Density$dx[Density$group=="h"]-1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")",sep=""))
		g_n_w = PV(paste(g_neighbours,"(",-Density$dx[Density$group=="g"]+1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")",sep=""))
		h_n_w = PV(paste(h_neighbours,"(",-Density$dx[Density$group=="h"]+1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")",sep=""))

		U_loc = PV("U_local")
		U_inv = PV("invU")
	}
?>
#define myMax(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a > _b ? _a : _b; })
// Convective boundary from: A phase-field lattice Boltzmann model for simulating multiphase flows
//							in porous media: Application and comparison to experiments of CO2
//							sequestration at pore scale
CudaDeviceFunction void EConvect(){
	real_t U_local = myMax(0, U(-1,0,0));
	real_t invU = 1.0/(1+ U_local);
	<?R
		if (Options$OutFlow) {
			C(g, (g_old + U_loc*g_n_e)*U_inv)
			C(h, (h_old + U_loc*h_n_e)*U_inv)

			C(g_old, g)
			C(h_old, h)
		}
	?>
}
CudaDeviceFunction void WConvect(){
	real_t U_local = myMax(0, -U(1,0,0));
	real_t invU = 1.0/(1 - U_local);
	<?R
		if (Options$OutFlow) {
			C(g, (g_old + U_loc*g_n_w)*U_inv)
			C(h, (h_old + U_loc*h_n_w)*U_inv)
			
			C(g_old, g)
			C(h_old, h)
		}
	?>
}

CudaDeviceFunction void ENeumann(){
	<?R
		if (Options$OutFlow){
			C(g, PV(paste0(g_neighbours,"(",-Density$dx[Density$group=="g"]-1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")")))	
			C(h, PV(paste0(h_neighbours,"(",-Density$dx[Density$group=="h"]-1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")")))	
		}
	?>
}
CudaDeviceFunction void WNeumann(){
	<?R
		if (Options$OutFlow){
			C(g, PV(paste0(g_neighbours,"(",-Density$dx[Density$group=="g"]+1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")")))	
			C(h, PV(paste0(h_neighbours,"(",-Density$dx[Density$group=="h"]+1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")")))	
		}
	?>
}
#endif

CudaDeviceFunction void MovingNWall(){
	// Experimental, use with care!

	g4  = g3;
	g24 = g25;
	g26 = g23;

	g9  = g12 + VelocityX/36.0;
	g13 = g8  + VelocityX/36.0;
	g17 = g16 + VelocityX/9.0;

	g10 = g11 - VelocityX/36.0;
	g14 = g7  - VelocityX/36.0;
	g18 = g15 - VelocityX/9.0;
	{
		<?R ZouHeRewrite(EQ_h, h, c(1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void MovingSWall(){
	// Experimental, use with care!

	g3  = g4;
	g25 = g24;
	g23 = g26;

	g12 = g9  - VelocityX/36.0;
	g8  = g13 - VelocityX/36.0;
	g16 = g17 - VelocityX/9.0;

	g11 = g10 + VelocityX/36.0;
	g7  = g14 + VelocityX/36.0;
	g15 = g18 + VelocityX/9.0;
	{
		<?R ZouHeRewrite(EQ_h, h, c(1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void BounceBack(){
	real_t tmp;
	tmp = g0; g0 = g0; g0 = tmp;
	tmp = g1; g1 = g2; g2 = tmp;
	tmp = g3; g3 = g4; g4 = tmp;
	tmp = g5; g5 = g6; g6 = tmp;
	tmp = g7; g7 = g14; g14 = tmp;
	tmp = g8; g8 = g13; g13 = tmp;
	tmp = g9; g9 = g12; g12 = tmp;
	tmp = g10; g10 = g11; g11 = tmp;
	tmp = g15; g15 = g18; g18 = tmp;
	tmp = g16; g16 = g17; g17 = tmp;
	tmp = g19; g19 = g22; g22 = tmp;
	tmp = g20; g20 = g21; g21 = tmp;
	tmp = g23; g23 = g26; g26 = tmp;
	tmp = g24; g24 = g25; g25 = tmp;

	tmp = h0; h0 = h0; h0 = tmp;
	tmp = h1; h1 = h2; h2 = tmp;
	tmp = h3; h3 = h4; h4 = tmp;
	tmp = h5; h5 = h6; h6 = tmp;
	tmp = h7; h7 = h14; h14 = tmp;
	tmp = h8; h8 = h13; h13 = tmp;
	tmp = h9; h9 = h12; h12 = tmp;
	tmp = h10; h10 = h11; h11 = tmp;
#ifdef OPTIONS_q27
	tmp = h15; h15 = h18; h18 = tmp;
	tmp = h16; h16 = h17; h17 = tmp;
	tmp = h19; h19 = h22; h22 = tmp;
	tmp = h20; h20 = h21; h21 = tmp;
	tmp = h23; h23 = h26; h26 = tmp;
	tmp = h24; h24 = h25; h25 = tmp;
#endif
}

//######WETTING CONDITION DETAILS######//
<?R
# Definition of various boundary point edge cases that need special treatment
NORMAL_POINTING_INTO_SOLID_ON_NEXT_NODE = 1
NORMAL_POINTING_INTO_SOLID_ON_FURTHER_NEXT_NODE = 2
NEXT_NEXT_INTERPOLATING_POINTS_ARE_SOLID = 3
NEXT_INTERPOLATING_POINTS_ARE_SOLID = 4
BOTH_NEXT_AND_NNEXT_INTERPOLATING_POINTS_ARE_SOLID = 5
SPECIAL_POINT_HUGE_MAGIC_NUMBER = 2342e10
?>

CudaDeviceFunction real_t getIsItBoundary() {
	return IsBoundary(0, 0, 0);
}


/* Correct PhaseField values on the boundary nodes
 * that were not previously set because the normal
 * was pointing into another boundary node with not
 * yet set value
 */
CudaDeviceFunction void calcWallPhase_correction() {
	PhaseF = PhaseF(0,0,0);

	if (IsSpecialBoundaryPoint == <?%s NORMAL_POINTING_INTO_SOLID_ON_NEXT_NODE ?> ) {
		// take the phase field calculated already from the node in front.
		// Might as well calculate using the neighbors, e.g. averaging
		PhaseF = PhaseF_dyn(nw_x, nw_y, nw_z);
	}
}


/*
 * Calculate the phase field value for the boundary nodes
 */
CudaDeviceFunction void calcWallPhase(){
	PhaseF = PhaseF(0,0,0); //For fluid nodes.
	if ( IamWall || IamSolid ) {
		real_t a, h, pf_f;

		// This is needed, because otherwise geometric_staircaseimp performance will drop
		// (presumably because of the dynamic access that it has)
        <?R phase_field_field_name <- if (Options$geometric) 'gradPhi_PhaseF' else 'PhaseF' ?>

        pf_f = <?%s phase_field_field_name ?>_dyn(nw_x, nw_y, nw_z);

		h = 0.5 * sqrt(nw_x*nw_x + nw_y*nw_y + nw_z*nw_z);

        // handling special cases
		if (h < 0.001) {
			// If I am a wall/solid node and I am surrounded by solid nodes
			PhaseF = 1;
		} else if (fabs(radAngle - PI/2.0) < 1e-4) {
			// If I am not surrounded, but contact angle is pi/2 (90d)
			PhaseF = pf_f;
		} else if (IsSpecialBoundaryPoint == <?%d NORMAL_POINTING_INTO_SOLID_ON_NEXT_NODE ?>) {
			// Pass for now. Dont calculate anything, just set it to some huge number, purely to make sure
			// that the value is corrected in calcWall_correction, and otherwise the error would be visible
			// and hopefulyl break the simulation
			PhaseF = <?%f SPECIAL_POINT_HUGE_MAGIC_NUMBER ?>;
		} else if  (IsSpecialBoundaryPoint == <?%d NORMAL_POINTING_INTO_SOLID_ON_FURTHER_NEXT_NODE ?>) {
			// Eventhough I am geometric boundary condition, still apply surface energy
			// here because otherwise we cant really apply anything else
			a = -h * (4.0/IntWidth) * cos( radAngle );
			PhaseF = (1 + a - sqrt( (1+a)*(1+a) - 4*a*pf_f))/(a+1e-12) - pf_f;
		} else {
			// normal calculation with picking correct form depending on the boundary condition

		
			// Case 1: Apply surface energy BC (with calculated pf_f with standard or staircase improvement)
			a = -h * (4.0/IntWidth) * cos( radAngle );
			PhaseF = (1 + a - sqrt( (1+a)*(1+a) - 4*a*pf_f))/(a+1e-12) - pf_f;
		}
	}
}

CudaDeviceFunction real_t getSpecialBoundaryPoint() {
	return IsSpecialBoundaryPoint;
}


/*
 * Initialise and set: wall normals, get interpolating triangles and their coefficients,
 * find special nodes,
 */
CudaDeviceFunction void Init_wallNorm(){
	PhaseF = PhaseF(0,0,0);
    IsBoundary = IsBoundary(0,0,0);
	IsBoundary = 0.0;
	IsSpecialBoundaryPoint = 0.0;

	if ( IamWall || IamSolid ) { 
        IsBoundary = 1.0;
		int i,j,k;
	  	real_t tmp = 0.0;
	  	for (i=-1;i<2;i++){for (j=-1;j<2;j++){for (k=-1;k<2;k++){
			tmp += PhaseF_dyn(i,j,k);
	  	}}}

	  	if ( abs(tmp) > 26000){
			// I am surrounded by all solid nodes (sum(pf) = 27*-999 = -26973 if surrounded):
			nw_x = 0.0; nw_y = 0.0; nw_z = 0.0;
	  	} else {
			// no I am not surrounded, so calc normal:
			int solidFlag[27];
			int maxi = 0;
			real_t myNorm[3] = {0.0,0.0,0.0};
			real_t maxn=0.0, dot;

			// Calculate the normal direction based converting
			// negative PhaseF into actual solid flags
			<?R
			    myN   = PV(paste0("myNorm[",1:3-1,"]"))
			    pf    = PV(paste0("PhaseF(",U[,1],",",U[,2],",",U[,3],")/-998"))
			    solid = PV(paste0("solidFlag[",1:27-1,"]"))

			    C(solid, pf)
			?>
			for (i=0;i<27;i++){
				myNorm[0] += wg[i] * solidFlag[i] * d3q27_ex[i];
				myNorm[1] += wg[i] * solidFlag[i] * d3q27_ey[i];
				myNorm[2] += wg[i] * solidFlag[i] * d3q27_ez[i];

			}
			myNorm[0] *= -1.0/3.0;myNorm[1] *= -1.0/3.0;myNorm[2] *= -1.0/3.0;
			tmp = myNorm[0]*myNorm[0] + myNorm[1]*myNorm[1] + myNorm[2]*myNorm[2];

			// Calculate the closest discrete direction for normal:
			for (i = 0; i<27; i++) {
				dot = (myNorm[0]*d3q27_ex[i] + myNorm[1]*d3q27_ey[i] + myNorm[2]*d3q27_ez[i]) /
			      		sqrt( tmp*(d3q27_ex[i]*d3q27_ex[i] + d3q27_ey[i]*d3q27_ey[i] +
					 	   d3q27_ez[i]*d3q27_ez[i]) + 1e-12);
				if (dot > maxn) {
					maxn = dot; maxi = i;
				}
			}
			if (maxi < 0) {
				// This should not happen ?
				nw_x = 0.0;nw_y = 0.0;nw_z = 0.0;
			} else {
				nw_x = d3q27_ex[maxi];
				nw_y = d3q27_ey[maxi];
				nw_z = d3q27_ez[maxi];

				// normal points into another solid node, save it for the later treatment
				// NOTE: Cant use IsBoundary here, because it is not yet necessary set for
				// the neighboring nodes
				if (PhaseF_dyn(nw_x, nw_y, nw_z) < -100) {
					IsSpecialBoundaryPoint = <?%d NORMAL_POINTING_INTO_SOLID_ON_NEXT_NODE ?>;
				}
			}
	  	}
	} else {
	// I am a fluid node, I dont need no solid normal.
		nw_x = 0.0;
		nw_y = 0.0;
		nw_z = 0.0;
	}
}
